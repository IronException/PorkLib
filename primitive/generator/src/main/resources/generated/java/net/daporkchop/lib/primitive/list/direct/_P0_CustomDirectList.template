$$$settings$$$
{
    "P0": {
        "blacklist": [
            "Object"
        ]
    }
}
_headers_

import net.daporkchop.lib.primitive.strategy._P0_EqualsStrategy;

/**
 * A {@link _P0_DirectList} that uses a custom {@link _P0_EqualsStrategy} to check for equality between values.
 *
 * @author DaPorkchop_
 */
public class _P0_CustomDirectList_gH_ extends _P0_DirectList_gH_ {
    protected final _P0_EqualsStrategy_gH_ strategy;

    public _P0_CustomDirectList(_P0_EqualsStrategy_gH_ strategy)  {
        super();

        this.strategy = strategy;
    }

    public _P0_CustomDirectList(long minSize, _P0_EqualsStrategy_gH_ strategy)  {
        super(minSize);

        this.strategy = strategy;
    }

    @Override
    public boolean remove(_p0_ val)    {
        long size = this.size;
        for (long l = 0L; l < size; l++)    {
            if (this.strategy.equals(val, PUnsafe.get_P0_(this.addr + l * _arrScaleP0_)))   {
                PUnsafe.copyMemory(this.addr + (l + 1L) * _arrScaleP0_, this.addr + l * _arrScaleP0_, size - l);
                this.checkShrink();
                return true;
            }
        }
        return false;
    }

    @Override
    public long longIndexOf(_p0_ val){
        long size = this.size;
        for (long l = 0L; l < size; l++)    {
            if (this.strategy.equals(val, PUnsafe.get_P0_(this.addr + l * _arrScaleP0_)))   {
                return (int) l;
            }
        }
        return -1;
    }
}
