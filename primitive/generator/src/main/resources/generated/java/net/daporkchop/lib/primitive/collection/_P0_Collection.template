_headers_

import net.daporkchop.lib.primitive.function.consumer._P0_Consumer;
import net.daporkchop.lib.primitive.util.Synchronizable;

/**
 * The most simple abstraction of a collection. Supports adding, removing, counting and iterating over
 * elements. The exact behavior of all methods are implementation-specific.
 *
 * @author DaPorkchop_
 */
public interface _P0_Collection_gH_ extends Synchronizable<_P0_Collection_gH_> {
    /**
     * Adds a value to the collection.
     * <p>
     * Some implementations may refuse to add elements (e.g. if they have a maximum size or do not accept
     * {@code null} values), and will return {@code false} if the add operation was refused. See
     * documentation for the implementation for more information.
     *
     * @param val the value to be added
     * @return whether or not the value was added
     * @throws UnsupportedOperationException if this implementation does not allow adding elements
     */
    boolean add(_p0_ val) throws UnsupportedOperationException;

    /**
     * Removes a single instance of a value from the collection.
     * <p>
     * If no matching values could be found, this will return {@code false}, {@code true} otherwise.
     *
     * @param val the value to be removed
     * @throws UnsupportedOperationException if this implementation does not allow removing elements
     */
    boolean remove(_p0_ val) throws UnsupportedOperationException;

    /**
     * Checks if the collection contains the given value.
     * <p>
     * This function checks for a value that is equal to the given value. What exactly constitutes equality
     * between two values is up to the implementation to decide, although generally it will check using the
     * {@code ==} operator or {@link Object#equals(Object)}.
     *
     * @param val the value to check for
     * @return whether or not the collection contains an equal value
     */
    boolean contains(_p0_ val);

    /**
     * Passes each element in this collection to the given function.
     *
     * @param consumer the function to run
     */
    void forEach(_P0_Consumer_gH_ consumer);

    /**
     * @return an {@link _P0_Iterator} over the elements in this collection
     */
    _P0_Iterator_gH_ iterator();

    /**
     * @return the number of elements in this collection, or {@code -1} if the size is too large to fit in an {@code int}
     */
    int size();

    /**
     * For collections that allow more than {@code 2^31 - 1} elements.
     *
     * @return the number of elements in this collection
     */
    default long longSize() {
        return this.size();
    }

    /**
     * Clears this collection, removing all elements.
     * <p>
     * After this method has been invoked, this instance is expected to be reset as if it were a newly created
     * instance.
     */
    void clear();

    /**
     * Clears this collection, removing all elements.
     * <p>
     * Unlike {@link #clear()}, implementations may choose to not completely reset this instance's state, and
     * rather maintain some allocated resources in order to preserve performance. However, by default this is
     * simply a proxy to {@link #clear()}.
     */
    default void removeAll()    {
        this.clear();
    }

    /**
     * Releases any resources allocated by this collection.
     * <p>
     * After invoking this method the collection should not be used for any purpose, and attempting to invoke
     * any methods on a released collection will produce undefined behavior.
     * <p>
     * The behavior of this method is highly implementation-dependant. This may e.g. free directly allocated
     * memory, or simply make resources available for garbage collection.
     * <p>
     * Any actions done by this method are expected to be done automatically when this collection instance
     * is garbage collected, this method simply allows doing it explicitly to free up as many resources as possible
     * for performance reasons in some scenarios.
     */
    void release();

    @Override
    default _P0_Collection_gH_ sync(Object mutex)    {
        throw new UnsupportedOperationException(); //TODO
    }
}
