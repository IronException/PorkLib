$$$settings$$$
{
     "genericNames": {
         "P0": "E"
     }
}
_headers_

import net.daporkchop.lib.primitive.collection._P0_Collection;
import net.daporkchop.lib.primitive.collection.IterationCompleteException;
import net.daporkchop.lib.primitive.list.sync._P0_SynchronizedList;
import net.daporkchop.lib.primitive.util.Synchronizable;

/**
 * A {@link _P0_Collection} that maintains element order in a numeric sequence, without gaps.
 *
 * @author DaPorkchop_
 */
public interface _P0_List_gH_ extends _P0_Collection_gH_, Synchronizable<_P0_List_gH_> {
    /**
     * Appends the given value to the end of the list.
     *
     * @see _P0_Collection#add(_nameP0_)
     */
    @Override
    boolean add(_p0_ val);

    /**
     * Inserts the given value at the given index in the list, moving elements with higher indices up to make
     * room.
     *
     * @param i   the index that the value should be added at
     * @param val the value to add
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-{@link #size()}
     */
    void add(int i, _p0_ val) throws IndexOutOfBoundsException;

    /**
     * @see #add(int, _nameP0_)
     */
    default void add(long i, _p0_ val) throws IndexOutOfBoundsException {
        if (i > Integer.MAX_VALUE)  {
            throw new IndexOutOfBoundsException();
        } else {
            this.add((int) i, val);
        }
    }

    /**
     * Removes a single instance of a value from the list, moving following values down to fill the gap.
     *
     * @see _P0_Collection#remove(_nameP0_)
     */
    @Override
    boolean remove(_p0_ val);

    /**
     * Removes the element at the given index, moving following values down to fill the gap.
     *
     * @param i the index of the value to remove
     * @return the value that was removed
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-({@link #size()} - 1)
     */
    _p0_ removeAt(int i) throws IndexOutOfBoundsException;

    /**
     * @see #removeAt(int)
     */
    default _p0_ removeAt(long i) throws IndexOutOfBoundsException {
        if (i > Integer.MAX_VALUE)  {
            throw new IndexOutOfBoundsException();
        } else {
            return this.removeAt((int) i);
        }
    }

    /**
     * Retrieves the element at the given index.
     *
     * @param i the index of the value to get
     * @return the value at the given index
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-({@link #size()} - 1)
     */
    _p0_ get(int i) throws IndexOutOfBoundsException;

    /**
     * @see #get(int)
     */
    default _p0_ get(long i) throws IndexOutOfBoundsException {
        if (i > Integer.MAX_VALUE)  {
            throw new IndexOutOfBoundsException();
        } else {
            return this.get((int) i);
        }
    }

    /**
     * Replaces the element at the given index with the given value.
     *
     * @param i   the index of the value to replace
     * @param val the new value
     * @return the old value
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-({@link #size()} - 1)
     */
    _p0_ set(int i, _p0_ val) throws IndexOutOfBoundsException;

    /**
     * @see #set(int, _nameP0_)
     */
    default _p0_ set(long i, _p0_ val) throws IndexOutOfBoundsException {
        if (i > Integer.MAX_VALUE)  {
            throw new IndexOutOfBoundsException();
        } else {
            return this.set((int) i, val);
        }
    }

    /**
     * Gets the first index of the given value in the list.
     *
     * @param val the value to search for
     * @return the index of the given value, or {@code -1} if it couldn't be found
     * @see _P0_Collection#contains(_nameP0_)
     */
    int indexOf(_p0_ val);

    /**
     * @see #indexOf(_nameP0_)
     */
    default long longIndexOf(_p0_ val) {
        return this.indexOf(val);
    }

    @Override
    default boolean contains(_p0_ val) {
        return this.indexOf(val) != -1;
    }

    @Override
    default _P0_Listerator_gH_ iterator() {
        return new _P0_Listerator_gH_() {
            private int limit = _P0_List.this.size();
            private int index = 0;
            private boolean removed = false;

            @Override
            public int index() {
                return this.index;
            }

            @Override
            public boolean hasNext() {
                return this.removed ? this.index < this.limit : this.index < this.limit - 1;
            }

            @Override
            public _p0_ next() throws IterationCompleteException {
                if (this.hasNext()) {
                    int i = this.removed ? this.index : this.index++;
                    this.removed = false;
                    return _P0_List.this.get(i);
                } else {
                    throw IterationCompleteException.INSTANCE;
                }
            }

            @Override
            public _p0_ remove() {
                if (!this.removed)  {
                    this.removed = true;
                    this.limit--;
                    return _P0_List.this.removeAt(this.index);
                } else {
                    throw new IllegalStateException("already removed!");
                }
            }

            @Override
            public boolean hasPrev() {
                return this.removed ? this.index >= 0 : this.index > 0;
            }

            @Override
            public _p0_ prev() throws IterationCompleteException {
                if (this.hasPrev()) {
                    int i = this.removed ? this.index : this.index--;
                    this.removed = false;
                    return _P0_List.this.get(i);
                } else {
                    throw IterationCompleteException.INSTANCE;
                }
            }

            @Override
            public void jump(int i) throws IndexOutOfBoundsException {
                if (i < 0 || i >= this.limit)   {
                    throw new IndexOutOfBoundsException();
                }
            }

            @Override
            public _p0_ replace(_p0_ val) {
                return _P0_List.this.set(this.index, val);
            }
        };
    }

    @Override
    default _P0_List_gH_ sync(Object mutex) {
        return new _P0_SynchronizedList_gH_(this, mutex);
    }
}
