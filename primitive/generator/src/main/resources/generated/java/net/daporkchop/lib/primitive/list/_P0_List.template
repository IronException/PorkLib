_headers_

import net.daporkchop.lib.primitive.collection._P0_Collection;
import net.daporkchop.lib.primitive.list.sync._P0_SynchronizedList;
import net.daporkchop.lib.primitive.util.Synchronizable;

/**
 * A {@link _P0_Collection} that maintains element order in a numeric sequence, without gaps.
 *
 * @author DaPorkchop_
 */
public interface _P0_List_gH_ extends _P0_Collection_gH_, Synchronizable<_P0_List_gH_> {
    /**
     * Appends the given value to the end of the list.
     *
     * @see _P0_Collection#add(_nameP0_)
     */
    @Override
    boolean add(_p0_ val);

    /**
     * Inserts the given value at the given index in the list, moving elements with higher indices up to make
     * room.
     *
     * @param i   the index that the value should be added at
     * @param val the value to add
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-{@link #size()}
     */
    void add(int i, _p0_ val) throws IndexOutOfBoundsException;

    /**
     * Removes a single instance of a value from the list, moving following values down to fill the gap.
     *
     * @see _P0_Collection#remove(_nameP0_)
     */
    @Override
    boolean remove(_p0_ val);

    /**
     * Removes the element at the given index, moving following values down to fill the gap.
     *
     * @return the value that was removed
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-({@link #size()} - 1)
     */
    _p0_ removeAt(int i) throws IndexOutOfBoundsException;

    /**
     * Replaces the element at the given index with the given value.
     *
     * @param i   the index of the value to replace
     * @param val the new value
     * @return the old value
     * @throws IndexOutOfBoundsException if the given index is not within the inclusive range of 0-({@link #size()} - 1)
     */
    _p0_ set(int i, _p0_ val) throws IndexOutOfBoundsException;

    /**
     * Gets the first index of the given value in the list.
     *
     * @param val the value to search for
     * @return the index of the given value, or {@code -1} if it couldn't be found
     * @see _P0_Collection#contains(_nameP0_)
     */
    int indexOf(_p0_ val);

    @Override
    default boolean contains(_p0_ val)  {
        return this.indexOf(val) != -1;
    }

    @Override
    _P0_Listerator_gH_ iterator();

    @Override
    default _P0_List_gH_ sync(Object mutex)    {
        return new _P0_SynchronizedList_gH_(this, mutex);
    }
}
