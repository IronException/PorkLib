$$$settings$$$
{
    "P0": {
        "blacklist": [
            "boolean",
            "float",
            "double"
        ]
    },
     "genericNames": {
         "P0": "K",
         "P1": "V"
     }
}
_headers_

import net.daporkchop.lib.math.primitive.BinMath;

import net.daporkchop.lib.primitive.lambda.consumer._P0__P1_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer._P0_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer._P1_Consumer;
import net.daporkchop.lib.primitive.map.hash.open._P0__P1_OpenHashMap;
import net.daporkchop.lib.primitive.map._P0__P1_Map;

/**
 * A hash-based {@link _P0__P1_Map} using a single array of entry objects, which each hold the key, value,
 * and the cached key hash. The arrays will expand as needed to avoid hash collisions, but will not
 * shrink down until the map is explicitly cleared with {@link #clear()} or {@link #release()}.
 * <p>
 * Does not allow using {@code _P0E_} as a key.
 * Allows using {@code _P1E_} as a value.
 * <p>
 * Warning! If you want to avoid as many allocations as possible, consider using {@link _P0__P1_OpenHashMap}.
 *
 * @author DaPorkchop_
 */
public class _P0__P1_OpenNodeHashMap_gH_ implements _P0__P1_Map_gH_ {
    protected Node_gH_[] nodes;
    protected int size;
    protected int mask;
    protected final int minSize;

    public _P0__P1_OpenNodeHashMap()    {
        this(16);
    }

    public _P0__P1_OpenNodeHashMap(int minSize)    {
        if (!BinMath.isPow2(minSize))  {
            throw new IllegalArgumentException("size must be a power of 2!");
        } else {
            this.minSize = minSize;

            this.clear();
        }
    }

    @Override
    public void put(_p0_ k, _p1_ v) {
        int origHash = this.hash(k);
        int hash = this.expandToFit(k, origHash);

        Node_gH_ node = this.nodes[hash];
        if (node == null)   {
            this.nodes[hash] = new Node_gH_(k, v, origHash);
            this.size++;
        } else {
            node.replace(v);
        }
    }

    @Override
    public boolean putAndCheck(_p0_ k, _p1_ v)  {
        int origHash = this.hash(k);
        int hash = this.expandToFit(k, origHash);

        Node_gH_ node = this.nodes[hash];
        if (node == null)   {
            this.nodes[hash] = new Node_gH_(k, v, origHash);
            this.size++;
            return false;
        } else {
            node.replace(v);
            return true;
        }
    }

    @Override
    public _p1_ putAndGet(_p0_ k, _p1_ v)   {
        int origHash = this.hash(k);
        int hash = this.expandToFit(k, origHash);

        Node_gH_ node = this.nodes[hash];
        if (node == null)   {
            this.nodes[hash] = new Node_gH_(k, v, origHash);
            this.size++;
            return _P1E_;
        } else {
            return node.replaceAndGet(v);
        }
    }

    protected int expandToFit(_p0_ k, int origHash)  {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        int hash = origHash & this.mask;
        Node_gH_ node;
        while ((node = this.nodes[hash]) != null && this.nequals(node.key, k)){
            this.grow();
            hash = origHash & this.mask;
        }
        return hash;
    }

    @Override
    public void replace(_p0_ k, _p1_ v) {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        Node_gH_ node = this.nodes[this.hash(k) & this.mask];
        if (node != null && this.equals(node.key, k))   {
            node.replace(v);
        }
    }

    @Override
    public boolean replaceAndCheck(_p0_ k, _p1_ v)  {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        Node_gH_ node = this.nodes[this.hash(k) & this.mask];
        if (node != null && this.equals(node.key, k))   {
            node.replace(v);
            return true;
        } else {
            return false;
        }
    }

    @Override
    public _p1_ replaceAndGet(_p0_ k, _p1_ v)   {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        Node_gH_ node = this.nodes[this.hash(k) & this.mask];
        if (node != null && this.equals(node.key, k))   {
            return node.replaceAndGet(v);
        } else {
            return _P1E_;
        }
    }

    @Override
    public void remove(_p0_ k)  {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        int hash = this.hash(k) & this.mask;
        Node_gH_ node = this.nodes[hash];
        if (node != null && this.equals(node.key, k))   {
            this.size--;
            this.nodes[hash] = null;
        }
    }

    @Override
    public boolean removeAndCheck(_p0_ k)   {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        int hash = this.hash(k) & this.mask;
        Node_gH_ node = this.nodes[hash];
        if (node != null && this.equals(node.key, k))   {
            this.size--;
            this.nodes[hash] = null;
            return true;
        } else {
            return false;
        }
    }

    @Override
    public _p1_ removeAndGet(_p0_ k)   {
        if (k == _P0E_) {
            throw new IllegalArgumentException("Cannot use `_P0E_` as key!");
        }
        int hash = this.hash(k) & this.mask;
        Node_gH_ node = this.nodes[hash];
        if (node != null && this.equals(node.key, k))   {
            this.size--;
            this.nodes[hash] = null;
            return node.value;
        } else {
            return _P1E_;
        }
    }

    @Override
    public _p1_ get(_p0_ k) {
        if (k == _P0E_) {
            return _P1E_;
        }
        Node_gH_ node = this.nodes[this.hash(k) & this.mask];
        if (node != null && this.equals(node.key, k))    {
            return node.value;
        } else {
            return _P1E_;
        }
    }

    @Override
    public boolean containsKey(_p0_ k) {
        Node_gH_ node = this.nodes[this.hash(k) & this.mask];
        return node != null && this.equals(node.key, k);
    }

    @Override
    public void forEachKey(_P0_Consumer_GP0_consumer) {
        if (consumer == null)   {
            throw new NullPointerException("consumer");
        } else {
            for (Node_gH_ node : this.nodes)    {
                if (node != null)   {
                    consumer.accept(node.key);
                }
            }
        }
    }

    @Override
    public void forEachValue(_P1_Consumer_GP1_consumer) {
        if (consumer == null)   {
            throw new NullPointerException("consumer");
        } else {
            for (Node_gH_ node : this.nodes)    {
                if (node != null)   {
                    consumer.accept(node.value);
                }
            }
        }
    }

    @Override
    public void forEach(_P0__P1_Consumer_gH_ consumer)    {
        if (consumer == null)   {
            throw new NullPointerException("consumer");
        } else {
            for (Node_gH_ node : this.nodes)    {
                if (node != null)   {
                    consumer.accept(node.key, node.value);
                }
            }
        }
    }

    @Override
    public int size()   {
        return this.size;
    }

    protected void grow()   {
        <%@SuppressWarnings("unchecked")%>
        Node_gH_[] nodes = <%(Node_gH_[]) %>new Node[this.nodes.length << 1];
        this.updateLength(nodes.length);

        for (Node_gH_ node : this.nodes) {
            if (node != null) {
                nodes[node.hash & this.mask] = node; //there won't be any hash collisions here, because we're actually adding more bits onto the hash
            }
        }

        this.nodes = nodes;
    }

    protected void updateLength(int length) {
        if (length < this.minSize || !BinMath.isPow2(length))   {
            throw new IllegalArgumentException(String.valueOf(length));
        } else {
            this.mask = length - 1;
        }
    }

    @Override
    public void clear() {
        this.updateLength(this.minSize);
        this.size = 0;
        this.nodes = null; //set to null first to allow garbage collection in case the min size is very big
        <%@SuppressWarnings("unchecked")%>
        Node_gH_[] nodes = <%(Node_gH_[]) %>new Node[this.minSize];
        this.nodes = nodes;
    }

    @Override
    public void removeAll()    {
        this.size = 0;
        java.util.Arrays.fill(this.nodes, null);
    }

    @Override
    public void release()   {
        this.nodes = null;
    }

    protected int hash(_p0_ key)    {
        return _hashP0|key|_;
    }

    protected boolean equals(_p0_ key1, _p0_ key2)    {
        return _equalsP0|key1|key2|_;
    }

    protected boolean nequals(_p0_ key1, _p0_ key2)    {
        return _nequalsP0|key1|key2|_;
    }

    protected Node_gH_ newNode(_p0_ key, _p1_ value)  {
        return new Node_gH_(key, value, this.hash(key));
    }

    protected static class Node_gH_ implements _P0__P1_Map.Entry_gH_ {
        protected final _p0_ key;
        protected final int hash;
        protected _p1_ value;

        public Node(_p0_ key, _p1_ value, int hash) {
            this.key = key;
            this.hash = hash;
            this.value = value;
        }

        @Override
        public _p0_ key()   {
            return this.key;
        }

        @Override
        public _p1_ value() {
            return this.value;
        }

        @Override
        public void replace(_p1_ v)   {
            this.value = v;
        }

        @Override
        public _p1_ replaceAndGet(_p1_ v)   {
            _p1_ oldValue = this.value;
            this.value = v;
            return oldValue;
        }

        @Override
        public boolean replaceSupported()  {
            return true;
        }
    }
}
