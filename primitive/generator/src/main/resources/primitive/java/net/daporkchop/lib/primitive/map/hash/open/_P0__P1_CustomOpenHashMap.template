$$$settings$$$
{
    "params": [
        {
            "genericName": "K",
            "blacklist": [
                "boolean",
                "float",
                "double"
            ]
        },
        {
            "genericName": "V"
        }
    ]
}
_headers_

import net.daporkchop.lib.primitive.strategy._P0_EqualsStrategy;
import net.daporkchop.lib.primitive.strategy._P0_HashStrategy;
import net.daporkchop.lib.primitive.strategy._P0_Strategy;

/**
 * A {@link _P0__P1_OpenHashMap} that uses a custom {@link _P0_Strategy} to hash and check for equality
 * between keys.
 *
 * @author DaPorkchop_
 * @see _P0__P1_OpenHashMap
 */
public class _P0__P1_CustomOpenHashMap_gH_ extends _P0__P1_OpenHashMap_gH_ {
    protected final _P0_EqualsStrategy_GP0_equals;
    protected final _P0_HashStrategy_GP0_hash;

    public _P0__P1_CustomOpenHashMap(_P0_Strategy_GP0_strategy)    {
        this(16, strategy);
    }

    public _P0__P1_CustomOpenHashMap(int minSize, _P0_Strategy_GP0_strategy)    {
        this(minSize, strategy, strategy);
    }

    public _P0__P1_CustomOpenHashMap(_P0_EqualsStrategy_GP0_ equals, _P0_HashStrategy_GP0_hash)    {
        this(16, equals, hash);
    }

    public _P0__P1_CustomOpenHashMap(int minSize, _P0_EqualsStrategy_GP0_equals, _P0_HashStrategy_GP0_hash)    {
        super(minSize);
        if (equals == null)   {
            throw new NullPointerException("equals");
        } else if (hash == null)    {
            throw new NullPointerException("hash");
        } else {
            this.equals = equals;
            this.hash = hash;
        }
    }

    @Override
    protected int hash(_p0_ key)    {
        return this.hash.hashInt(key);
    }

    @Override
    protected boolean equals(_p0_ key1, _p0_ key2)    {
        return this.equals.equals(key1, key2);
    }

    @Override
    protected boolean nequals(_p0_ key1, _p0_ key2)    {
        return !this.equals.equals(key1, key2);
    }
}
