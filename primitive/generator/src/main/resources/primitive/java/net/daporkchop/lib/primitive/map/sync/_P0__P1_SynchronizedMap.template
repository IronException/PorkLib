$$$settings$$$
{
    "P0": {
        "blacklist": [
            "boolean",
            "float",
            "double"
        ]
    },
    "genericNames": {
        "P0": "K",
        "P1": "V"
    }
}
_headers_

import net.daporkchop.lib.primitive.lambda.consumer._P0__P1_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer._P0_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer._P1_Consumer;
import net.daporkchop.lib.primitive.map._P0__P1_Map;
import net.daporkchop.lib.primitive.util.Synchronized;

/**
 * A {@link _P0__P1_Map} that provides synchronized access to a delegate instance.
 *
 * @author DaPorkchop_
 */
public final class _P0__P1_SynchronizedMap_gH_ implements _P0__P1_Map_gH_, Synchronized<_P0__P1_Map_gH_> {
    private final _P0__P1_Map_gH_ delegate;
    private final Object mutex;

    public _P0__P1_SynchronizedMap(_P0__P1_Map_gH_ delegate, Object mutex)  {
        if (delegate == null)   {
            throw new NullPointerException("delegate");
        } else if (mutex == null)   {
            throw new NullPointerException("mutex");
        } else {
            this.delegate = delegate;
            this.mutex = mutex;
        }
    }

    @Override
    public void put(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            this.delegate.put(k, v);
        }
    }

    @Override
    public boolean putAndCheck(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            return this.delegate.putAndCheck(k, v);
        }
    }

    @Override
    public _p1_ putAndGet(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            return this.delegate.putAndGet(k, v);
        }
    }

    @Override
    public void replace(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            this.delegate.replace(k, v);
        }
    }

    @Override
    public boolean replaceAndCheck(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            return this.delegate.replaceAndCheck(k, v);
        }
    }

    @Override
    public _p1_ replaceAndGet(_p0_ k, _p1_ v) {
        synchronized (this.mutex)   {
            return this.delegate.replaceAndGet(k, v);
        }
    }

    @Override
    public void remove(_p0_ k) {
        synchronized (this.mutex)   {
            this.delegate.remove(k);
        }
    }

    @Override
    public boolean removeAndCheck(_p0_ k) {
        synchronized (this.mutex)   {
            return this.delegate.removeAndCheck(k);
        }
    }

    @Override
    public _p1_ removeAndGet(_p0_ k) {
        synchronized (this.mutex)   {
            return this.delegate.removeAndGet(k);
        }
    }

    @Override
    public _p1_ get(_p0_ k) {
        synchronized (this.mutex)   {
            return this.delegate.get(k);
        }
    }

    @Override
    public boolean containsKey(_p0_ k) {
        synchronized (this.mutex)   {
            return this.delegate.containsKey(k);
        }
    }

    @Override
    public void forEachKey(_P0_Consumer_GP0_consumer) {
        synchronized (this.mutex)   {
            this.delegate.forEachKey(consumer);
        }
    }

    @Override
    public void forEachValue(_P1_Consumer_GP1_consumer) {
        synchronized (this.mutex)   {
            this.delegate.forEachValue(consumer);
        }
    }

    @Override
    public void forEach(_P0__P1_Consumer_gH_ consumer) {
        synchronized (this.mutex)   {
            this.delegate.forEach(consumer);
        }
    }

    @Override
    public int size() {
        synchronized (this.mutex)   {
            return this.delegate.size();
        }
    }

    @Override
    public long longSize() {
        synchronized (this.mutex)   {
            return this.delegate.longSize();
        }
    }

    @Override
    public void clear() {
        synchronized (this.mutex)   {
            this.delegate.clear();
        }
    }

    @Override
    public void removeAll()    {
        synchronized (this.mutex)   {
            this.delegate.removeAll();
        }
    }

    @Override
    public void release() {
        synchronized (this.mutex)   {
            this.delegate.release();
        }
    }

    @Override
    public _P0__P1_Map_gH_ sync(Object mutex) {
        throw new UnsupportedOperationException();
    }
}
